---
- name:                  EC2 Remote facts
  ec2_remote_facts:
    region:              "{{ region }}"
    filters:
      "tag:Name": "{{ tag_key_vals.Name }}"
  register:              ec2_info

- name: Create Empty List for Instances
  set_fact:
    public_dns_name: []
    public_ip: []

- name: Put Instance Into The List
  set_fact:
    public_dns_name: "{{ public_dns_name }} + ['{{ item.public_dns_name }}']"
    public_ip: "{{ public_ip }} + ['{{ item.public_ip_address }}']"
  when:
    "{{ item.public_dns_name != '' }}"
  with_items:
    - "{{ ec2_info.instances }}"

- debug:
    msg: "{{ item }}"
  with_items:
    - "{{ public_dns_name }}"

- name: For each host, scan for its ssh public key, use ec2 nodename instead of ipaddr
  command: "ssh-keyscan -t rsa {{ item }}"
  register: hosts
  with_items: 
    "{{ public_dns_name }}"

- name: check hosts
  debug: msg="{{ hosts }}"

- name: deploy hosts on all servers
  known_hosts:
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
    path: "~/.ssh/known_hosts"
  with_items: '{{ hosts.results }}'

- name: For each host, scan for its ssh public key, use ec2 nodename instead of ipaddr
  command: "ssh-keyscan -t rsa {{ item }}"
  register: hosts
  with_items: 
    "{{ public_ip }}"

- name: check hosts
  debug: msg="{{ hosts }}"

- name: deploy hosts on all servers
  known_hosts:
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
    path: "~/.ssh/known_hosts"
  with_items: '{{ hosts.results }}'